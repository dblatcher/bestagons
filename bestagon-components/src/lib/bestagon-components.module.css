
/* 
 width numbers are used in the CSS and TS, so need to match.
 TO DO? generate classes dynamically with Emotion?
*/

.hexRow,
.hexBox {
    --hex-width: 150px;
    --clip-hexagon: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
}

.bigHex {
    --hex-width: 300px;
}

.smallHex {
    --hex-width: 80px;
}

.xSmallHex {
    --hex-width: 40px;
}

/* 13/15 (0.86 recurring) is an approximation root 3/4 (0.8660254037844386) */
/* which is the actual ratio of width to height for a regular hexagon */
.hexRow,
.hexBox {
    --hex-height: calc(var(--hex-width) * (13/15));
    --hex-height-and-half: calc(var(--hex-height) * (3/2));
    --hex-side-padding: calc(var(--hex-width) * (1/4))
}

.hexRow {
    position: relative;
    min-height: var(--hex-height);
    pointer-events: none;
}

.hexRowExtraHeight {
    min-height: var(--hex-height-and-half);
}

.hexBox {
    padding: 0 var(--hex-side-padding);
    position: relative;
    width: var(--hex-width);
    height: var(--hex-height);
    box-sizing: border-box;
    clip-path: var(--clip-hexagon);
    pointer-events: all;
}

.hexBoxAbsolute {
    position: absolute;
    left: 0;
    top: 0;
}

.hexBox_img {
    position: absolute;
    inset: 0;
    width: 100%;
    height: auto;
}

.hexBox_svg {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
}

.hexBox_svg polygon {
    stroke-width: 2;
    pointer-events: fill;
}

.hexBox_content {
    position: absolute;
    top: 0;
    inset: 0 25%;
    height: 100%;
}

.hexButton {
    background-color: unset;
    text-align: unset;
    cursor: pointer;
    border: none;
}

.hexButton .hexBox_svg polygon {
    stroke-width: 4;
    stroke: gray;
}

.hexButton:focus .hexBox_svg polygon {
    stroke-width: 8;
    stroke: black;
}

.hexButton:hover .hexBox_svg polygon {
    fill: rgba(10, 10, 10, .1);
    stroke: black;
}